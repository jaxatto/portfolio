@use './variables' as *;
@use './functions' as *;
@use 'sass:color';
@use 'sass:map';

/* ---------------------------------- */
/* --------- States mixins ---------- */
/* ---------------------------------- */

// Hover style
@mixin hover($color, $inverse: false) {
  &:hover {
    @if $inverse {
      background-color: change-lightness($color, hover);
      color: var(--color-white);
      fill: var(--color-white);
      // No border change
    } @else {
      color: change-lightness($color, hover);
      fill: change-lightness($color, hover);
      border-color: change-lightness($color, hover);
    }
  }
}

// Pressed (active) style
@mixin pressed($color, $inverse: false) {
  &:active {
    @if $inverse {
      background-color: change-lightness($color, pressed);
      color: var(--color-white);
      fill: var(--color-white);
      // No border change
    } @else {
      color: change-lightness($color, pressed);
      fill: change-lightness($color, pressed);
      border-color: change-lightness($color, pressed);
    }
  }
}

// Focus style
@mixin focus($color, $inverse: false) {
  &:focus-visible {
    @if $inverse {
      outline: px-to-rem(3) solid $color;
      outline-offset: px-to-rem(3);
      background-color: $color;
      color: var(--color-white);
      fill: var(--color-white);
    } @else {
      outline: px-to-rem(3) solid $color;
      outline-offset: px-to-rem(3);
    }
  }
}

// Combined interactive states
@mixin interactive-states($color, $inverse: false) {
  @include hover($color, $inverse);
  @include pressed($color, $inverse);
  @include focus($color, $inverse);
}

/* ---------------------------------- */
/* ---------- Other mixins ---------- */
/* ---------------------------------- */

// Get palette colors and apply to links
@mixin group-palette($palette: null, $hover: true) {
  $link-color: if($palette != null, map.get($palette, link), map.get($main-colors, primary));

  color: $link-color;
  fill: $link-color;

  @include interactive-states($link-color)
}

// Get wrapper sizes and assign max widths for common use
@mixin wrapper-max-width($type: content) {
  max-width: px-to-rem(map.get($wrapper-widths, $type));
  width: 100%;

  @if $type == site {
    margin: 0 auto;
  }
}

// Easily include breakpoints in classes
@mixin respond($breakpoint) {
  $value: map.get($breakpoints, $breakpoint);
  @if $value {
    @media (max-width: #{px-to-rem($value)}) {
      @content;
    }
  }
}

